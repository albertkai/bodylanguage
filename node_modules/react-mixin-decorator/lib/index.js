'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = MixinDecorator;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IGNORE = {
  getInitialState: true,
  getDefaultProps: true,
  propTypes: true
};

/**
 * Returns a higher-order component based on some mixin's methods.
 *
 * @param {String} displayName for the higher-order component
 * @param {Object} mixin
 * @param {Object} defaultProps Optional
 * @param {Array} autoBind Optional the mixin may need some methods auto-bound
 * @return {Function}
 * @api public
 */
function MixinDecorator(displayName, mixin, defaultProps, autoBind) {
  var getDefaultProps = mixin.getDefaultProps;
  var getInitialState = mixin.getInitialState;
  var propTypes = mixin.propTypes;
  var keys = Object.keys(mixin).filter(function (key) {
    return !IGNORE[key];
  });

  if (Array.isArray(defaultProps)) {
    autoBind = defaultProps;
    defaultProps = {};
  }

  var HOC = function HOC(Component) {
    var _class, _temp;

    return _temp = _class = function (_React$Component) {
      _inherits(_class, _React$Component);

      function _class(props) {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this, props));

        keys.forEach(function (key) {
          _this[key] = mixin[key];
        });

        if (Array.isArray(autoBind)) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = autoBind[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var method = _step.value;

              _this[method] = _this[method].bind(_this);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        if (getDefaultProps) {
          addDefaultProps(props, getDefaultProps.call(_this));
        }

        if (getInitialState) {
          _this.state = getInitialState.call(_this);
        } else {
          _this.state = {}; // just in case
        }
        return _this;
      }

      _createClass(_class, [{
        key: 'render',
        value: function render() {
          var props = getProps.call(this, mixin);

          return _react2.default.createElement(Component, props);
        }
      }]);

      return _class;
    }(_react2.default.Component), _class.displayName = displayName, _class.defaultProps = defaultProps, _class.propTypes = propTypes, _temp;
  };

  HOC.mixin = mixin;
  return HOC;
}

/**
 * Adds `mixin.getDefaultProps()` values to the actual `props` if undefined.
 *
 * @param {Object} props
 * @param {Object} mixinDefaultProps
 * @api private
 */
function addDefaultProps(props, mixinDefaultProps) {
  if (mixinDefaultProps) {
    for (var key in mixinDefaultProps) {
      if (props[key] === undefined) {
        props[key] = mixinDefaultProps[key];
      }
    }
  }
}

/**
 * Gets the `props` and `state` to be passed to the component (as `props`).
 * Mixin methods are bound to the higher-order component.
 *
 * @param {Object} mixin
 * @return {Object}
 * @api private
 */
function getProps(mixin) {
  var _this2 = this;

  var props = {};

  [this.props, this.state].forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        var value = obj[key];

        props[key] = typeof value === 'function' && value === mixin[key] ? value.bind(_this2) : value;
      }
    }
  });

  return props;
}